#!/bin/bash
# Licensed to the StackStorm, Inc ('StackStorm') under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function usage() {
  echo ""
  echo "Usage: $0"
  echo ""
  echo "Options:"
  echo "  -o  Skip Orquesta tests"
  echo "  -w  Run Windows tests"
  echo "  -b Which branch of st2tests to use (defaults to master)"
  echo ""
  >&2
}

RUN_ORQUESTA_TESTS=true
RUN_WINDOWS_TESTS=false
ST2_TESTS_BRANCH="master"

while getopts "b:wo" o
do
    case "${o}" in
        b)
            ST2_TESTS_BRANCH=${OPTARG}
            ;;
        o)
            RUN_ORQUESTA_TESTS=false
            ;;
        w)
            RUN_WINDOWS_TESTS=true
            ;;
        \?)
            usage
            exit 2
            ;;
        :)
            usage
            exit 2
            ;;
    esac
done

shift $(($OPTIND-1))

## Script to install samples, tests, and run all workflows in tests pack.
if [[ `id -u` != 0 ]]; then
  echo >&2 "st2-self-check must be run as root"
  exit 1
fi

if [[ -z "$ST2_AUTH_TOKEN" && -z "$ST2_API_KEY" ]]; then
  echo >&2 "st2-self-check must be run with an auth token or API key in an environment variable"
  echo >&2 "Please export a valid auth token in ST2_AUTH_TOKEN or a valid API key in ST2_API_KEY"
  echo >&2 "and re-run st2-self-check"
  exit 1
fi

ERRORS=0
PACKS="tests examples"

#Determine API HTTP Protocol
PROTOCOL="http"
ST2_CLI_CONFIG_FILE=`readlink -f ~/.st2/config`
if [ ! -z ${ST2_API_URL+x} ]; then
  if [[ ${ST2_API_URL} = https* ]]; then
    PROTOCOL="https"
  fi
elif [ ! -z ${ST2_BASE_URL+x} ]; then
  if [[ ${ST2_BASE_URL} = https* ]]; then
    PROTOCOL="https"
  fi
elif [ -e "${ST2_CLI_CONFIG_FILE}" ]; then
  if [ ! "cat ${ST2_CLI_CONFIG_FILE} | grep -E 'https://(.+):9101'" ]; then
    PROTOCOL="https"
  elif [ ! "cat ${ST2_CLI_CONFIG_FILE} | grep -E 'base_url\s?=\s?https'" ]; then
    PROTOCOL="https"
  fi
fi

pushd ~
echo "Cloning st2tests (branch=${ST2_TESTS_BRANCH}) in `pwd`."
git clone --depth 1 --branch ${ST2_TESTS_BRANCH} https://github.com/StackStorm/st2tests.git
EXIT_CODE=$?

if [ ${EXIT_CODE} -ne 0 ]; then
    echo >&2 "Failed to clone st2tests repo"
    exit 1
fi

echo "Copying asserts, fixtures, tests and examples packs."
chown -R root:st2packs st2tests/packs/
chmod -R 775 st2tests/packs/*
cp -R --preserve st2tests/packs/* /opt/stackstorm/packs/
cp -Rf --preserve /usr/share/doc/st2/examples /opt/stackstorm/packs/

echo "Installing asserts, fixtures, tests and examples packs."
st2 run packs.setup_virtualenv packs=examples,tests,asserts,fixtures,webui
st2ctl reload --register-all

echo "Deleting 'st2tests' directory from `pwd`."
rm -R st2tests/
popd

# Retrieve test action list
TEST_ACTION_LIST=`st2 action list --pack=tests -w 90 | awk '{ print $2 }' | grep -v "|" | grep -v "ref" | grep tests.test_`

# Run all the tests
for TEST in $TEST_ACTION_LIST
do
    # If -w option is not set, skip Windows related tests
    if [ ${RUN_WINDOWS_TESTS} = "false" ] && [ ${TEST} = "tests.test_windows_runners" ]; then
        echo "Skipping ${TEST}..."
        continue
    fi

    if [ ${RUN_WINDOWS_TESTS} = "false" ] && [ ${TEST} = "tests.test_winrm_runners" ]; then
        echo "Skipping ${TEST}..."
        continue
    fi

    if [ ${RUN_WINDOWS_TESTS} = "false" ] && [ ${TEST} = "tests.test_winrm_large_script" ]; then
        echo "Skipping ${TEST}..."
        continue
    fi

    echo -n "Attempting Test ${TEST}..."

    START_TS=$(date +%s)
    OUTPUT=$(st2 run ${TEST} protocol=${PROTOCOL} token=${ST2_AUTH_TOKEN})
    echo "${OUTPUT}" | grep "status" | grep -q "succeeded"
    EXIT_CODE=$?
    END_TS=$(date +%s)
    DURATION=$(expr ${END_TS} - ${START_TS})

    if [ ${EXIT_CODE} -ne 0 ]; then
        echo -e "ERROR! (${DURATION}s)"
        echo "Test output: ${OUTPUT}"
        ((ERRORS++))
    else
        echo "OK! (${DURATION}s)"
    fi
done

if [ ${RUN_ORQUESTA_TESTS} = "true" ]; then
    echo -n "Attempting Example examples.orquesta-examples..."

    START_TS=$(date +%s)
    OUTPUT=$(st2 run examples.orquesta-examples)
    echo "${OUTPUT}" | grep "status" | grep -q "succeeded"
    EXIT_CODE=$?
    END_TS=$(date +%s)
    DURATION=$(expr ${END_TS} - ${START_TS})

    if [ ${EXIT_CODE} -ne 0 ]; then
        echo -e "ERROR! (${DURATION}s)"
        echo "Test output: ${OUTPUT}"
        ((ERRORS++))
    else
        echo "OK! (${DURATION}s)"
    fi
else
    echo "Skipping examples.orquesta-examples..."
fi

if [ $ERRORS -ne 0 ]; then
    echo "SELF CHECK FAILED!"
    echo "st2-self-check failed.  See above.  Also check the execution list for details."
    echo "st2 execution list"
else
    echo "SELF CHECK SUCCEEDED!"
    echo -e "st2-self-check succeeded."

cat << EOF

#############################################################
###################################################   #######
###############################################   /~\   #####
############################################   _- \`~~~', ####
##########################################  _-~       )  ####
#######################################  _-~          |  ####
####################################  _-~            ;  #####
##########################  __---___-~              |   #####
#######################   _~   ,,                  ;  \`,,  ##
#####################  _-~    ;'                  |  ,'  ; ##
###################  _~      '                    \`~'   ; ###
############   __---;                                 ,' ####
########   __~~  ___                                ,' ######
#####  _-~~   -~~ _                               ,' ########
##### \`-_         _                              ; ##########
#######  ~~----~~~   ;                          ; ###########
#########  /          ;                        ; ############
#######  /             ;                      ; #############
#####  /                \`                    ; ##############
###  /                                      ; ###############
#                                            ################

EOF

fi
