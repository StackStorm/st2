#!/usr/bin/env python
# Licensed to the StackStorm, Inc ('StackStorm') under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import argparse
import os
import sys

from st2common.util.crypto import AESKey


def main(key_path, force=False):
    key_path = os.path.abspath(key_path)
    base_path = os.path.dirname(key_path)

    if not os.access(base_path, os.W_OK):
        print(
            "ERROR: You do not have sufficient permissions to write to path: %s."
            % key_path
        )
        print("Try setting up permissions correctly and then run this tool.")
        sys.exit(1)

    if os.path.exists(key_path):
        print("You already have a key at the specified location %s!" % key_path)

        if not force:
            print(
                "Not generating a new key. Either delete the file or re-run with --force."
            )
            sys.exit(2)

        print("WARNING: Rewriting existing key with new key!")

    # Explicitly chose large key size
    aes_key = AESKey.generate(key_size=256)

    with open(key_path, "w") as key_file:
        key_file.write(aes_key.to_json())
        key_file.flush()

    msg = (
        "Key written to %s. " % key_path
        + "Secure the permissions so only StackStorm API "
        + "process and StackStorm admin access the file."
    )
    print(msg)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Tool for crypto key generation.")
    parser.add_argument(
        "-k",
        "--key-path",
        required=True,
        help="Path to file to write key to. Secure permissions of file so "
        + "only admin can read the crypto key.",
    )
    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        help="Force rewrite the key file if already exists.",
    )

    args = parser.parse_args()
    main(key_path=args.key_path, force=args.force)
