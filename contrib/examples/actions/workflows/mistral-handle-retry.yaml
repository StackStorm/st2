version: '2.0'
name: examples.mistral-handle-retry
description: >
    A sample workflow that demonstrates how to handle rollback and retry on error. 
    In this example, the workflow will error and then continue to retry until the file 
    /tmp/done exists. A parallel task will wait for some time before creating the
    file. When completed, /tmp/done will be deleted.

workflows:

    main:
        type: direct
        tasks:
            init:
                action: core.local cmd="rm -f /tmp/done"
                on-success:
                    - create-file
                    - test-error-undo-retry
            create-file:
                action: core.local cmd="touch /tmp/done"
                wait-before: 10
            test-error-undo-retry:
                workflow: work
                retry:
                    count: 30
                    delay: 1
                on-success:
                    - delete-file
            delete-file:
                action: core.local cmd="rm -f /tmp/done"

    work:
        type: direct
        tasks:
            do:
                action: core.local
                input:
                    cmd: >
                        echo 'Do something useful here.';
                        if [ ! -e '/tmp/done' ]; then exit 1; fi
                on-error:
                    - undo
            undo:
                action: core.local
                input:
                    cmd: "echo 'Define rollback tasks here.'"
                on-complete:
                    - throw
            throw:
                action: std.fail
