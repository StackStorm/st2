version: 2
jobs:
  # Run st2 Unit Tests
  unit:
    parallelism: 2
    docker:
      - image: buildpack-deps:precise
      - image: mongo:3.4
      - image: rabbitmq:3
    environment:
      - DEBIAN_FRONTEND: noninteractive
      - LANG: C.UTF-8
    working_directory: ~/st2
    steps:
      - checkout
#      - restore_cache:
#          keys:
#            - st2-unit-002-{{ checksum "fixed-requirements.txt" }}-{{ checksum "test-requirements.txt" }}
      - run:
          name: Install dependencies
          command: |
            set -x
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
            echo "deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-3.4.list
            apt-get -qq -y update
            apt-get -qq -y upgrade
            # Download the mongo shell, needed to connect to Docker container + delete the DB
            apt-get -qq -y install mongodb-org-shell
            apt-get -qq -y install sudo python-dev libssl-dev curl git bash
            curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo python
            sudo pip install -U virtualenv
      - run: |
          python --version
      - run:
          name: Create stanley user
          command: sudo .circle/add-itest-user.sh
      - run:
          name: Install pip requirements
          command: make requirements
      - run:
          name: Run st2 Unit Tests
          command: make ci-unit
#      - save_cache:
#          key: st2-unit-002-{{ checksum "fixed-requirements.txt" }}-{{ checksum "test-requirements.txt" }}
#          paths:
#            - ~/.cache/pip/
#            - virtualenv/

  # Run st2 Integration tests
  integration:
    docker:
      - image: circleci/python:2.7
      - image: mongo:3.4
      - image: rabbitmq:3
    working_directory: ~/st2
    steps:
      - checkout
      - restore_cache:
          keys:
            - st2-integration-001-{{ checksum "fixed-requirements.txt" }}-{{ checksum "test-requirements.txt" }}
      - run:
          # Download the mongo shell, needed to connect to Docker container + delete the DB
          name: Install Mongo Shell
          command: |
            set -x
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
            echo "deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
            sudo apt-get -qq -y update
            sudo apt-get -qq -y install mongodb-org-shell
      - run:
          name: Create stanley user
          command: sudo .circle/add-itest-user.sh
      - run:
          name: Install pip requirements
          command: make requirements
      - run:
          name: Run st2 Integration Tests
          command: make ci-integration
      - save_cache:
          key: st2-integration-001-{{ checksum "fixed-requirements.txt" }}-{{ checksum "test-requirements.txt" }}
          paths:
            - ~/.cache/pip/
            - virtualenv/

  # Run st2 Lint Checks
  lint:
    docker:
      - image: circleci/python:2.7
      - image: mongo:3.4
      - image: rabbitmq:3
    working_directory: ~/st2
    steps:
      - checkout
      - restore_cache:
          keys:
            # we can use the same caching env as for integration
            - st2-integration-001-{{ checksum "fixed-requirements.txt" }}-{{ checksum "test-requirements.txt" }}
      - run:
          name: Install pip requirements
          command: make requirements
      - run:
          name: Run st2 Lint Checks
          command: make ci-checks
      - run:
          name: Run st2 Packs Tests
          command: make ci-packs-tests
      - save_cache:
          # we can use the same caching env as for integration
          key: st2-integration-001-{{ checksum "fixed-requirements.txt" }}-{{ checksum "test-requirements.txt" }}
          paths:
            - ~/.cache/pip/
            - virtualenv/

  # Build & Test st2 packages
  packages:
    parallelism: 4
    # 4CPUs & 8GB RAM CircleCI machine
    # sadly, it doesn't work with 'setup_remote_docker'
    resource_class: large
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/python:2.7
    working_directory: ~/st2
    environment:
      - DISTROS: "trusty xenial el6 el7"
      - ST2_PACKAGES_REPO: https://github.com/StackStorm/st2-packages
      - ST2_PACKAGES: "st2"
      - ST2_CHECKOUT: 0
      - ST2_GITDIR: /tmp/st2
      - BASH_ENV: ~/.buildenv
    steps:
      - checkout
      - setup_remote_docker:
          reusable: true    # default - false
          exclusive: true   # default - true
      - run:
          name: Docker version
          command: |
            set -x
            docker --version
            docker-compose --version
      - run:
          name: Download st2-packages repository
          command: |
            set -x
            git clone ${ST2_PACKAGES_REPO} ~/st2-packages
            cd ~/st2-packages
            git checkout ${CIRCLE_BRANCH} || true
      - run:
          name: Initialize packages Build Environment
          command: |
            set -x
            export ST2_GITREV=${CIRCLE_BRANCH}
            .circle/buildenv_st2.sh
          working_directory: ~/st2-packages
      - run:
          # Workaround for CircleCI docker-compose limtation where volumes don't work
          # See detailed explanation: https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
          name: Copy st2-packages files to build containers
          command: |
            # Remove st2-packages-vol container if exists in CircleCI cache
            docker rm -f st2-packages-vol || true
            # creating dummy container which will hold a volume with data files
            docker create -v /root/st2-packages -v ${ST2_GITDIR} -v /root/build -v /var/log/st2 -v /var/log/mistral -v /root/.cache/pip -v /tmp/wheelhouse --name st2-packages-vol alpine:3.4 /bin/true
            # copy st2-packages data files into this volume
            docker cp ~/st2-packages st2-packages-vol:/root
            # copy st2 source files into this volume
            docker cp . st2-packages-vol:${ST2_GITDIR}
      - run:
          name: Pull dependent Docker Images
          command: |
            # Clean-up running containers from the previous build
            .circle/docker-compose2.sh clean
            # Pull Docker images
            .circle/docker-compose2.sh pull ${DISTRO}
          working_directory: ~/st2-packages
      - run:
          name: Build the ${DISTRO} Packages
          command: |
            .circle/docker-compose2.sh build ${DISTRO}
            # Once build container finishes we can copy packages directly from it
            mkdir -p ~/st2/packages/${DISTRO}/log/
            docker cp st2-packages-vol:/root/build ~/st2/packages/${DISTRO}
          working_directory: ~/st2-packages
#      # TODO: It works! (~0.5-1min speed-up) Enable CircleCI2.0 cache for pip and wheelhouse later
#      - run:
#          name: Build the ${DISTRO} Packages 2nd time (compare with pip/wheelhouse cached)
#          command: |
#            .circle/docker-compose2.sh build ${DISTRO}
#            # Once build container finishes we can copy packages directly from it
#            docker cp st2-packages-vol:/root/build /tmp/st2-packages
#          working_directory: ~/st2-packages
      - run:
          name: Test the Packages
          command: |
            .circle/docker-compose2.sh test ${DISTRO}
            # Once test container finishes we can copy logs directly from it
            docker cp st2-packages-vol:/var/log/st2 ~/st2/packages/${DISTRO}/log/st2
            docker cp st2-packages-vol:/var/log/mistral ~/st2/packages/${DISTRO}/log/mistral
            # Clean-up running containers
            .circle/docker-compose2.sh clean
          working_directory: ~/st2-packages
      - store_artifacts:
          path: ~/st2/packages
          destination: packages
      - persist_to_workspace:
          root: packages
          paths:
            - .

  # Trigger st2 webhook to run end2end tests
  trigger_e2etests:
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/python:2.7
    working_directory: ~/st2
    steps:
      - run:
          name: Docker version
          command: |
            set -x
            docker --version
            docker-compose --version

  # Deploy produced deb/rpm packages to PackageCloud staging
  deploy:
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/ruby:2.4
    working_directory: /tmp/deploy
    environment:
      - DISTROS: "trusty xenial el6 el7"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: List workspace files
          command: find . | sed 's|[^/]*/|  |g'
      - run:
          name: Install dependencies
          command: |
            set -x
            sudo apt-get -y install parallel jq
            gem install package_cloud
            sudo wget -O /usr/local/bin/packagecloud.sh https://raw.githubusercontent.com/StackStorm/st2-packages/master/.circle/packagecloud.sh && sudo chmod +x /usr/local/bin/packagecloud.sh
      - run:
          name: Deploy deb/rpm packages to PackageCloud
          command: "parallel -v -j0 --line-buffer packagecloud.sh deploy {} {}/build ::: ${DISTROS}"

# Putting everything together
workflows:
  version: 2
  package-test-and-deploy:
    jobs:
      - unit
#      - integration
#      - lint
#      - packages
#      - trigger_e2etests:
#          requires:
#            - packages
#      - deploy:
#          requires:
#            - unit
#            - integration
#            - lint
#            - packages
#          filters:
#            branches:
#              only:
#                - master
#                - /v[0-9]+\.[0-9]+/
#                - feature/circleci
                #- experimental/circle-2.0-workflows

experimental:
  notify:
    branches:
      only:
        - master
        - /v[0-9]+\.[0-9]+/
