Troubleshooting
===============

Common Troubleshooting Scenarios
--------------------------------

This section includes common problems you might encounter while using the
platform and how you can troubleshoot and debug them.

Rule is not being matched / action is not firing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You created a rule which supposed to fire an action when a particular trigger
is emitted, but for some reason, this action is not being called.

There are multiple reasons why this could be the case:

1. Trigger is not being emitted
2. Rule criteria doesn't match the emitted trigger
3. Action runner service is not running
4. Combination of the above

In this section we will guide you through troubleshooting this issue.

1. Checking that the trigger is emitted
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

First thing you should do is check that trigger is being emitted and flowing
to the rules engine.

The easiest way to do that is to check the rules engine (st2rulesengine process) service log.

1. Check the rules engine service log

By default, rules engine logs are stored in ``/var/log/st2rulesengine.log``
file. You should inspect this file (``cat``, ``grep`` and ``tail`` are your
friends) and look for a line similar to the one below.

.. code-block:: bash

    2015-02-23 15:13:51,250 INFO [-] Found <n> rules defined for trigger <trigger name>

For example:

.. code-block:: bash

    2015-02-23 15:13:51,250 INFO [-] Found 1 rules defined for trigger st2.generic.actiontrigger

2. Checking the sensor container log

As an alternative, you can check the sensor container service log
(``/var/log/st2/st2sensorcontainer.*.log``). Keep in mind that this approach
only works for triggers being emitted by sensors and won't work for triggers
generated by incoming webhooks and triggers generated by timers.

If you don't see this line, this means that trigger is not being emitted and
flowing to the rules engine. This could either mean that the sensor is
misconfigured or not running or that there is some other issue with the sensor.

2. Verifying the rule criteria
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now that we have established that trigger is indeed being emitted, we are going
to verify the rule criteria.

We are again going to resort to the rules engine service logs since this is the
places where the rules are matched against triggers and evaluated.

If your criteria matches the emitted trigger, you should see a message similar
to that one:

.. code-block:: bash

    2015-02-23 15:24:11,324 INFO [-] Matched 1 rule(s) for trigger_instance st2.generic.actiontrigger

If the message says ``Matched 0 rule(s)`` this means that the emitted trigger
doesn't match the defined rule criteria. Usually this is simply a feature -
trigger which was emitted is not the one you are interested in. If you believe
the rule should indeed match the defined trigger, the next step is to debug rule
criteria and making sure it's configured correctly.

For information on how to use ``st2-rule-tester`` tool to do that, please refer
to the :ref:`testing-rules` section.

3. Verifying that action runner service is running
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You have now fixed your your rule criteria (or there was nothing wrong with it),
but for some reason action is still not being fired / executed.

If you see message similar to the one below in your rules engine service log,
this mean that everything is indeed working as it should - trigger is
successfully matched against the rule criteria and an action execution is
scheduled.

.. code-block:: bash

    2015-02-23 15:32:21,694 INFO [-] Invoking action core.local for trigger_instance 54eb48050640fd32c2d34034 with data {"cmd": "echo \"2015-02-23 15:32:21.663471\""}.
    2015-02-23 15:32:21,788 AUDIT [-] Action execution scheduled. LiveAction=LiveActionDB(action="core.local", ...

If you see this message, but the action is still not being executed, this
usually simply means that the action runner, the service which is responsible
for running actions is not running.

The easiest way to check if the service is running is to use ``st2ctl`` tool:

.. code-block:: bash

    st2ctl status

If the service is for some reason not running, you can use ``st2ctl start``
command to try to start all the services again. If the service still doesn't
start after running the command, this usually means a configuration error
(e.g. invalid database information or credentials). The best way to debug
that is to look into the action runner service logs -
``/var/log/st2/logs/st2actionrunner.*.log``.

Submitting debugging information to StackStorm
----------------------------------------------

First step when trying to help you debug an issue or a problem you are having
is for us to try to reproduce the problem. To be able to do that, our setup
needs to resemble yours as closely as possible.

To save time and make yours and our life easier, the default distribution of
StackStorm includes a utility which allows you to easily and in a secure manner
send us the information we need to help you debug or troubleshoot an issue.

By default, this script sends us the following information:

* All the StackStorm services log files from ``/var/log/st2``
* Mistral service log file from ``/var/log/mistral.log``
* StackStorm and Mistral config file (``/etc/st2/st2.conf``,
  ``/etc/mistral/mistral.conf``). Prior to sending the config files we strip
  sensitive information such as database and queue access information.
* StackStorm content (integration packs) minus the pack configs.

All this information is bundled up in a tarball and encrypted using our
public key via public-key cryptography. Once submitted, this information
is only accessible to the StackStorm employees and it's used solely for
debugging purposes.

To send debug information to StackStorm, simply invoke the command shown
below:

.. sourcecode:: bash

    st2-submit-debug-info

    This will submit the following information to StackStorm: logs, configs, content, system_info
    Are you sure you want to proceed? [y/n] y
    2015-02-10 16:43:54,733  INFO - Collecting files...
    2015-02-10 16:43:55,714  INFO - Creating tarball...
    2015-02-10 16:43:55,892  INFO - Encrypting tarball...
    2015-02-10 16:44:02,591  INFO - Debug tarball successfully uploaded to StackStorm

By default, tool run in an interactive mode. If you want to run it an
non-interactive mode and assume "yes" as the answer to all the questions you
can use the ``--yes`` flag.

For example:

.. sourcecode:: bash

    st2-submit-debug-info --yes

    2015-02-10 16:45:36,074  INFO - Collecting files...
    2015-02-10 16:45:36,988  INFO - Creating tarball...
    2015-02-10 16:45:37,193  INFO - Encrypting tarball...
    2015-02-10 16:45:43,926  INFO - Debug tarball successfully uploaded to StackStorm

If you want to only send a specific information to StackStorm or exclude a
particular information you can use the ``--exclude-<content>`` flag.

For example, if you want to only send us log files, you would run the command
like this:

.. sourcecode:: bash

    st2-submit-debug-info --exclude-configs --exclude-content --exclude-system-info

Reviewing the debug information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you want to review and / or manipulate information (e.g. remove log lines
which you might find sensitive) which is sent to StackStorm, you can do that
using ``--review`` flag.

When this flag is used, the archive with debug information won't be encrypted
and uploaded to StackStorm.

.. sourcecode:: bash

    st2-submit-debug-info --review

    2015-02-10 17:43:49,016  INFO - Collecting files...
    2015-02-10 17:43:49,770  INFO - Creating tarball...
    2015-02-10 17:43:49,912  INFO - Debug tarball successfully generated and can be reviewed at: /tmp/st2-debug-output-vagrant-ubuntu-trusty-64-2015-02-10-17:43:49.tar.gz


Running Self-Verification
-------------------------

|st2| package-based installations come with a script, that allows to verify |st2| installation, using |st2| itself. 
Currently script covers the following aspects of |st2|:

* Basic ``st2`` commands (similar to the commands outlined in *Manual Verification* section)
* Examples pack installation
* Commands described in Quick Start
* Packs pack actions
* ActionChain and Mistral Workflows

To run the self-verification:

1. Switch to `root` user and save an authentication token into `ST2_AUTH_TOKEN` variable:

.. code-block:: bash

    sudo su
    export ST2_AUTH_TOKEN=`st2 auth testu -p testp -t`
    
2. Run ``st2-self-check`` script:

On Ubuntu / Debian:

.. code-block:: bash

    /usr/lib/python2.7/dist-packages/st2common/bin/st2-self-check
    
On RedHat / Fedora:

.. code-block:: bash

    /usr/lib/python2.7/site-packages/st2common/bin/st2-self-check
