FORMAT: 1A
HOST: http://kandra.stackstorm.com

# Kandra
This is a system that provides a way to describe the action (or sequence of actions) to be performed when a monitoring system(Nagios, Zabbix, Ganglia, Cacti etc.) or an external system sends out an event. This system can be thought of a giant dictionary which maintains a mapping between triggers received from a monitoring system and the action to be performed. The core functionality of this system is to invoke actions on emergence of such triggers.

# Group Rules
Rules related resources of the **Kandra API**

## Rules Collection [/rules]

### List all Rules [GET]
+ Response 200 (application/json)

        [{
            "id": 1,
            "enable": true,
            "trigger": {
                "type": "git:posthook",
                "options": {
                    "repo": "stackstorm/kandra"
                }
            },
            "action": {
                "type": "hubot:say",
                "options": {
                    "channel": "stackstorm",
                    "message": "New commit has been pushed in {{ repo }} by {{ author }}"
                }
            },
            "created": "2014-05-05T03:31:21.683Z",
            "edited": "2014-05-05T03:42:28.168Z",
            "triggered": "2014-05-05T03:52:59.346Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 16
        }, {
            "id": 2,
            "enable": true,
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                }
            },
            "action": {
                "type": "jira:createTicket",
                "options": {
                    "project": "stackstorm",
                    "type": "story",
                    "summary": "Email: {{ subject }}",
                    "description": "{{ from }} wrote: \n{{ body }}",
                    "reporter": "{{ from }}"
                }
            },
            "created": "2014-05-05T04:03:53.751Z",
            "edited": "2014-05-05T04:03:53.751Z",
            "triggered": "2014-05-05T04:04:38.570Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 1
        }, { 
            "id": 3,
            "enable": false,
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                }
            },
            "action": {
                "type": "hubot:say",
                "options": {
                    "channel": "stackstorm",
                    "message": "New user story has been received from {{ from }}"
                }
            },
            "created": "2014-05-05T04:09:47.427Z",
            "edited": "2014-05-05T04:09:47.427Z",
            "triggered": "2014-05-05T04:09:47.427Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 0
        }]

### Create a Rule [POST]
+ Request (application/json)

        { 
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                }
            },
            "action": {
                "type": "hubot:say",
                "options": {
                    "channel": "stackstorm",
                    "message": "New user story has been received from {{ from }}"
                }
            }
        }

+ Response 201 (application/json)

        { 
            "id": 3,
            "dry": true,
            "enable": true,
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                }
            },
            "action": {
                "type": "hubot:say",
                "options": {
                    "channel": "stackstorm",
                    "message": "New user story has been received from {{ from }}"
                }
            },
            "created": "2014-05-05T04:09:47.427Z",
            "edited": "2014-05-05T04:09:47.427Z",
            "triggered": "2014-05-05T04:09:47.427Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 0
        }

## Rule [/rules/{id}]
A single Rule object with all its details

+ Parameters
    + id (required, number, `2`) ... Numeric `id` of the Rule to perform action with.

### Retrieve a Rule [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "enable": false,
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                }
            },
            "action": {
                "type": "jira:createTicket",
                "options": {
                    "project": "stackstorm",
                    "type": "story",
                    "summary": "Email: {{ subject }}",
                    "description": "{{ from }} wrote: \n{{ body }}",
                    "reporter": "{{ from }}"
                }
            },
            "created": "2014-05-05T04:03:53.751Z",
            "edited": "2014-05-05T04:03:53.751Z",
            "triggered": "2014-05-05T04:04:38.570Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 1
        }

### Update the rule [PUT]
It is actually a tricky one. The idea behind put is that it should replace the whole document, but in our case 
a) `id` and `created` should always stay the same, 
b) `triggered`, `checked` and `count` should change internally, thus should also stay intact,
c) `edited` should always change to current time.

It is unclear how should we treat the expanded trigger\action type (as an object, not a string), I'd say we should silently look for name key inside the object and use it instead, while ignoring the rest of the object. In other words:

        ...
        "trigger": "email:message",
        ...

is equal to

        ...
        "trigger": {
            "name": "email:message"
            ...
        }
        ...

+ Request (application/json)

        { 
            "id": 3,
            "dry": true,
            "enable": true,
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                }
            },
            "action": {
                "type": "hubot:say",
                "options": {
                    "channel": "stackstorm",
                    "message": "New user story has been received from {{ from }}"
                }
            },
            "created": "2014-05-05T04:09:47.427Z",
            "edited": "2014-05-05T04:09:47.427Z",
            "triggered": "2014-05-05T04:09:47.427Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 0
        }
        
+ Response 200 (application/json)

        { 
            "id": 3,
            "dry": true,
            "enable": true,
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                }
            },
            "action": {
                "type": "hubot:say",
                "options": {
                    "channel": "stackstorm",
                    "message": "New user story has been received from {{ from }}"
                }
            },
            "created": "2014-05-05T04:09:47.427Z",
            "edited": "2014-05-11T04:09:47.427Z",
            "triggered": "2014-05-05T04:09:47.427Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 0
        }

### Remove a Rule [DELETE]
+ Response 204

## Enable [/rules/{id}/enable]
Enable the rule

+ Parameters
    + id (required, number, `2`) ... Numeric `id` of the Rule

### Enable the rule [PUT]
+ Response 204

### Disable the rule [DELETE]
+ Response 204

## Activate [/rules/{id}/activate]
Promote dry-run rule to permanent one

+ Parameters
    + id (required, number, `2`) ... Numeric `id` of the Rule

### Confirm the rule [PUT]
+ Response 200 (application/json)

        {
            "id": 2,
            "enable": false,
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                }
            },
            "action": {
                "type": "jira:createTicket",
                "options": {
                    "project": "stackstorm",
                    "type": "story",
                    "summary": "Email: {{ subject }}",
                    "description": "{{ from }} wrote: \n{{ body }}",
                    "reporter": "{{ from }}"
                }
            },
            "created": "2014-05-05T04:03:53.751Z",
            "edited": "2014-05-05T04:03:53.751Z",
            "triggered": "2014-05-05T04:04:38.570Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 1
        }

## Auditing the rule [/rules/{id}/log]
Rule log

+ Parameters
    + id (required, number, `3`) ... Numeric `id` of the Rule

### List all entries [GET]
+ Response 200 (application/json)

        [{
            "trigger": {
                "type": "email:message",
                "options": {
                    "to": "support@stackstorm.com"
                },
                "response": {
                    "err": null,
                    "from": "stan@stackstorm.com",
                    "to": "support@stackstorm.com",
                    "subj": "Test",
                    "message": "Dry-run message. Disregard.",
                    "timestamp": "2014-09-11T16:41:11.922Z"
                },
                "timestamp": "2014-09-11T16:41:12.014Z"
            },
            "action": {
                "type": "hubot:say",
                "options": {
                    "channel": "stackstorm",
                    "message": "New user story has been received from {{ from }}"
                },
                "response": {
                    "err": null,
                    "channel": "stackstorm",
                    "message": "New user story has been received from stan@stackstorm.com",
                    "timestamp": "2014-09-11T16:41:12.470Z",
                    "userList": ["dzimine", "mar", "evan", "manas"]
                }
            }
        }]

# Group Services

## Triggers collection [/triggers]
### List all Triggers [GET]
+ Response 200 (application/json)

        [{
            "name": "git:prehook",
            "service": "Git",
            "title": "Pre-receive hook",
            "tags": ["git"],
            "slug": "commit is scheduled for merge",
            "parameters": [{
                "key": "author",
                "type": "text",
                "label": "Author",
                "desc": "Name or email of the commit author"
            }, {
                "key": "repo",
                "type": "text",
                "label": "Repository",
                "desc": "Name of the repository"
            }, {
                "key": "branch",
                "type": "text",
                "label": "Branch",
                "desc": "Name of the branch commits would land into"
            }, {
                "key": "title",
                "type": "text",
                "label": "Title",
                "desc": "First line of commit message"
            }, {
                "key": "desc",
                "type": "textarea",
                "label": "Description",
                "desc": "Commit message starting with second line"
            }]
        }, {
            "name": "git:posthook",
            "service": "Git",
            "title": "Post-receive hook",
            "tags": ["git"],
            "slug": "commit is merged",
            "parameters": [{
                "key": "author",
                "type": "text",
                "label": "Author",
                "desc": "Name or email of the commit author"
            }, {
                "key": "repo",
                "type": "text",
                "label": "Repository",
                "desc": "Name of the repository"
            }, {
                "key": "branch",
                "type": "text",
                "label": "Branch",
                "desc": "Name of the branch commits would land into"
            }, {
                "key": "title",
                "type": "text",
                "label": "Title",
                "desc": "First line of commit message"
            }, {
                "key": "desc",
                "type": "textarea",
                "label": "Description",
                "desc": "Commit message starting with second line"
            }]
        }, {
            "name": "hubot:command",
            "service": "Hubot",
            "title": "Receive a command",
            "tags": ["hubot", "chat"],
            "slug": "recived a command",
            "parameters": [{
                "key": "user",
                "type": "text",
                "label": "User",
                "desc": "Name of the user"
            }, {
                "key": "channel",
                "type": "text",
                "label": "Channel",
                "desc": "Name of the channel to listen for command"
            }, {
                "key": "command",
                "type": "text",
                "label": "Command",
                "desc": "The command to trigger to. Exclamation mark is not necessary."
            }, {
                "key": "args",
                "type": "text",
                "label": "Argument string",
                "desc": "the rest of the message after the command"
            }]
        }, {
            "name": "email:message",
            "service": "Email",
            "title": "Receive a message",
            "tags": ["email"],
            "slug": "received a message",
            "parameters": [{
                "key": "from",
                "type": "text",
                "label": "From",
                "desc": "Senders email address"
            }, {
                "key": "to",
                "type": "text",
                "label": "To",
                "desc": "Recipient email address"
            }, {
                "key": "subj",
                "type": "text",
                "label": "Subject",
                "desc": "Subject line of the mail"
            }, {
                "key": "message",
                "type": "textarea",
                "label": "Message"
            }]
        }, {
            "name": "jira:newTicket",
            "service": "Jira",
            "title": "New ticket",
            "tags": ["jira"],
            "slug": "ticket has been created",
            "parameters": [{
                "key": "project",
                "type": "text",
                "label": "Project",
                "desc": "Name or id of the project"
            }, {
                "key": "summary",
                "type": "text",
                "label": "Summary",
                "desc": "Short description of the ticket"
            }, {
                "key": "desc",
                "type": "textarea",
                "label": "Description",
                "desc": "Full description of the ticket"
            }, {
                "key": "type",
                "type": "select",
                "label": "Type",
                "options": ["bug", "story", "feature"]
            }]
        }]

## Actions collection [/actions]
### List all Actions [GET]
+ Response 200 (application/json)

        [{
            "name": "git:createTag",
            "service": "Git",
            "title": "Create new tag",
            "tags": ["git"],
            "slug": "create new tag",
            "parameters": [{
                "key": "tag",
                "type": "text",
                "label": "Tag name",
                "desc": "Name of the tag"
            }, {
                "key": "message",
                "type": "textarea",
                "label": "Message"
            }, {
                "key": "object",
                "type": "text",
                "label": "SHA object",
                "desc": "Identificator of the object to create tag to (ex. commit SHA)"
            }, {
                "key": "type",
                "type": "select",
                "label": "Type",
                "desc": "Type of the object",
                "options": [{
                    "key": "commit",
                    "value": "Commit"
                }, {
                    "key": "tree",
                    "value": "Tree"
                }, {
                    "key": "blob",
                    "value": "Blob"
                }]
            }]
        }, {
            "name": "hubot:say",
            "service": "Hubot",
            "title": "Say in channel",
            "tags": ["hubot", "chat"],
            "slug": "say",
            "parameters": [{
                "key": "channel",
                "type": "text",
                "label": "Channel",
                "desc": "Name of the channel to say to"
            }, {
                "key": "message",
                "type": "textarea",
                "label": "Message"
            }]
        }, {
            "name": "email:message",
            "service": "Email",
            "title": "Send a message",
            "tags": ["email"],
            "slug": "send a message",
            "parameters": [{
                "key": "from",
                "type": "select",
                "label": "From",
                "desc": "Address to send from",
                "options": [
                    "support@stackstorm.com",
                    "info@stackstorm.com",
                    "finance@stackstorm.com",
                    {
                        "key": "Same it was received to",
                        "value": "{{ to }}"
                    }
                ]
            }, {
                "key": "to",
                "type": "text",
                "label": "To",
                "desc": "Recipient email address"
            }, {
                "key": "subj",
                "type": "text",
                "label": "Subject",
                "desc": "Subject line of the mail"
            }, {
                "key": "message",
                "type": "textarea",
                "label": "Message"
            }]
        }, {
            "name": "jira:createTicket",
            "service": "Jira",
            "title": "Create new ticket",
            "tags": ["jira"],
            "slug": "create a ticket",
            "parameters": [{
                "key": "project",
                "type": "text",
                "label": "Project",
                "desc": "Name or id of the project"
            }, {
                "key": "summary",
                "type": "text",
                "label": "Summary",
                "desc": "Short description of the ticket"
            }, {
                "key": "desc",
                "type": "textarea",
                "label": "Description",
                "desc": "Full description of the ticket"
            }, {
                "key": "type",
                "type": "select",
                "label": "Type",
                "options": ["bug", "story", "feature"]
            }]
        }]

# Group Categories
**(depreciated)** A combination of triggers and stactions provided by particular service (git, nagios, etc.)

## Categories collection [/categories]
### List all Categories [GET]
+ Response 200 (application/json)

        {
            "git": {
                "name": "git",
                "title": "Git", 
                "triggers": {
                    "prehook": {
                        "name": "git:prehook",
                        "service": "Git",
                        "title": "Pre-receive hook",
                        "slug": "commit is scheduled for merge",
                        "parameters": [{
                            "key": "author",
                            "type": "text",
                            "label": "Author",
                            "desc": "Name or email of the commit author"
                        }, {
                            "key": "repo",
                            "type": "text",
                            "label": "Repository",
                            "desc": "Name of the repository"
                        }, {
                            "key": "branch",
                            "type": "text",
                            "label": "Branch",
                            "desc": "Name of the branch commits would land into"
                        }, {
                            "key": "title",
                            "type": "text",
                            "label": "Title",
                            "desc": "First line of commit message"
                        }, {
                            "key": "desc",
                            "type": "textarea",
                            "label": "Description",
                            "desc": "Commit message starting with second line"
                        }]
                    },
                    "posthook": {
                        "name": "git:posthook",
                        "service": "Git",
                        "title": "Post-receive hook",
                        "slug": "commit is merged",
                        "parameters": [{
                            "key": "author",
                            "type": "text",
                            "label": "Author",
                            "desc": "Name or email of the commit author"
                        }, {
                            "key": "repo",
                            "type": "text",
                            "label": "Repository",
                            "desc": "Name of the repository"
                        }, {
                            "key": "branch",
                            "type": "text",
                            "label": "Branch",
                            "desc": "Name of the branch commits would land into"
                        }, {
                            "key": "title",
                            "type": "text",
                            "label": "Title",
                            "desc": "First line of commit message"
                        }, {
                            "key": "desc",
                            "type": "textarea",
                            "label": "Description",
                            "desc": "Commit message starting with second line"
                        }]
                    }
                },
                "actions": {
                    "createTag": {
                        "name": "git:createTag",
                        "service": "Git",
                        "title": "Create new tag",
                        "slug": "create new tag",
                        "parameters": [{
                            "key": "tag",
                            "type": "text",
                            "label": "Tag name",
                            "desc": "Name of the tag"
                        }, {
                            "key": "message",
                            "type": "textarea",
                            "label": "Message"
                        }, {
                            "key": "object",
                            "type": "text",
                            "label": "SHA object",
                            "desc": "Identificator of the object to create tag to (ex. commit SHA)"
                        }, {
                            "key": "type",
                            "type": "select",
                            "label": "Type",
                            "desc": "Type of the object",
                            "options": [{
                                "key": "commit",
                                "value": "Commit"
                            }, {
                                "key": "tree",
                                "value": "Tree"
                            }, {
                                "key": "blob",
                                "value": "Blob"
                            }]
                        }]
                    }
                }
            },
            "hubot": {
                "name": "hubot",
                "title": "Chat",
                "triggers": {
                    "command": {
                        "name": "hubot:command",
                        "service": "Hubot",
                        "title": "Receive a command",
                        "slug": "recived a command",
                        "parameters": [{
                            "key": "user",
                            "type": "text",
                            "label": "User",
                            "desc": "Name of the user"
                        }, {
                            "key": "channel",
                            "type": "text",
                            "label": "Channel",
                            "desc": "Name of the channel to listen for command"
                        }, {
                            "key": "command",
                            "type": "text",
                            "label": "Command",
                            "desc": "The command to trigger to. Exclamation mark is not necessary."
                        }, {
                            "key": "args",
                            "type": "text",
                            "label": "Argument string",
                            "desc": "the rest of the message after the command"
                        }]
                    }
                },
                "actions": {
                    "say": {
                        "name": "hubot:say",
                        "service": "Hubot",
                        "title": "Say in channel",
                        "slug": "say",
                        "parameters": [{
                            "key": "channel",
                            "type": "text",
                            "label": "Channel",
                            "desc": "Name of the channel to say to"
                        }, {
                            "key": "message",
                            "type": "textarea",
                            "label": "Message"
                        }]
                    }
                }
            },
            "email": {
                "name": "email",
                "title": "Email",
                "triggers": {
                    "message": {
                        "name": "email:message",
                        "service": "Email",
                        "title": "Receive a message",
                        "slug": "received a message",
                        "parameters": [{
                            "key": "from",
                            "type": "text",
                            "label": "From",
                            "desc": "Senders email address"
                        }, {
                            "key": "to",
                            "type": "text",
                            "label": "To",
                            "desc": "Recipient email address"
                        }, {
                            "key": "subj",
                            "type": "text",
                            "label": "Subject",
                            "desc": "Subject line of the mail"
                        }, {
                            "key": "message",
                            "type": "textarea",
                            "label": "Message"
                        }]
                    }
                },
                "actions": {
                    "message": {
                        "name": "email:message",
                        "service": "Email",
                        "title": "Send a message",
                        "slug": "send a message",
                        "parameters": [{
                            "key": "from",
                            "type": "select",
                            "label": "From",
                            "desc": "Address to send from",
                            "options": [
                                "support@stackstorm.com",
                                "info@stackstorm.com",
                                "finance@stackstorm.com",
                                {
                                    "key": "Same it was received to",
                                    "value": "{{ to }}"
                                }
                            ]
                        }, {
                            "key": "to",
                            "type": "text",
                            "label": "To",
                            "desc": "Recipient email address"
                        }, {
                            "key": "subj",
                            "type": "text",
                            "label": "Subject",
                            "desc": "Subject line of the mail"
                        }, {
                            "key": "message",
                            "type": "textarea",
                            "label": "Message"
                        }]
                    }
                }
            },
            "jira": {
                "name": "jira",
                "title": "Jira",
                "triggers": {
                    "newTicket": {
                        "name": "jira:newTicket",
                        "service": "Jira",
                        "title": "New ticket",
                        "slug": "ticket has been created",
                        "parameters": [{
                            "key": "project",
                            "type": "text",
                            "label": "Project",
                            "desc": "Name or id of the project"
                        }, {
                            "key": "summary",
                            "type": "text",
                            "label": "Summary",
                            "desc": "Short description of the ticket"
                        }, {
                            "key": "desc",
                            "type": "textarea",
                            "label": "Description",
                            "desc": "Full description of the ticket"
                        }, {
                            "key": "type",
                            "type": "select",
                            "label": "Type",
                            "options": ["bug", "story", "feature"]
                        }]
                    }
                },
                "actions": {
                    "createTicket": {
                        "name": "jira:createTicket",
                        "service": "Jira",
                        "title": "Create new ticket",
                        "slug": "create a ticket",
                        "parameters": [{
                            "key": "project",
                            "type": "text",
                            "label": "Project",
                            "desc": "Name or id of the project"
                        }, {
                            "key": "summary",
                            "type": "text",
                            "label": "Summary",
                            "desc": "Short description of the ticket"
                        }, {
                            "key": "desc",
                            "type": "textarea",
                            "label": "Description",
                            "desc": "Full description of the ticket"
                        }, {
                            "key": "type",
                            "type": "select",
                            "label": "Type",
                            "options": ["bug", "story", "feature"]
                        }]
                    }
                }
            }
        }

## Category [/categories/{name}]

+ Parameters
    + name (required, string, `git`) ... `Name` of the Category to get
    
### Retrieve a Category [GET]
+ Response 200 (application/json)
    
        {
            "name": "git",
            "title": "Git", 
            "triggers": {
                "prehook": {
                    "name": "git:prehook",
                    "service": "Git",
                    "title": "Pre-receive hook",
                    "slug": "commit is scheduled for merge",
                    "parameters": [{
                        "key": "author",
                        "type": "text",
                        "label": "Author",
                        "desc": "Name or email of the commit author"
                    }, {
                        "key": "repo",
                        "type": "text",
                        "label": "Repository",
                        "desc": "Name of the repository"
                    }, {
                        "key": "branch",
                        "type": "text",
                        "label": "Branch",
                        "desc": "Name of the branch commits would land into"
                    }, {
                        "key": "title",
                        "type": "text",
                        "label": "Title",
                        "desc": "First line of commit message"
                    }, {
                        "key": "desc",
                        "type": "textarea",
                        "label": "Description",
                        "desc": "Commit message starting with second line"
                    }]
                },
                "posthook": {
                    "name": "git:posthook",
                    "service": "Git",
                    "title": "Post-receive hook",
                    "slug": "commit is merged",
                    "parameters": [{
                        "key": "author",
                        "type": "text",
                        "label": "Author",
                        "desc": "Name or email of the commit author"
                    }, {
                        "key": "repo",
                        "type": "text",
                        "label": "Repository",
                        "desc": "Name of the repository"
                    }, {
                        "key": "branch",
                        "type": "text",
                        "label": "Branch",
                        "desc": "Name of the branch commits would land into"
                    }, {
                        "key": "title",
                        "type": "text",
                        "label": "Title",
                        "desc": "First line of commit message"
                    }, {
                        "key": "desc",
                        "type": "textarea",
                        "label": "Description",
                        "desc": "Commit message starting with second line"
                    }]
                }
            },
            "actions": {
                "createTag": {
                    "name": "git:createTag",
                    "service": "Git",
                    "title": "Create new tag",
                    "slug": "create new tag",
                    "parameters": [{
                        "key": "tag",
                        "type": "text",
                        "label": "Tag name",
                        "desc": "Name of the tag"
                    }, {
                        "key": "message",
                        "type": "textarea",
                        "label": "Message"
                    }, {
                        "key": "object",
                        "type": "text",
                        "label": "SHA object",
                        "desc": "Identificator of the object to create tag to (ex. commit SHA)"
                    }, {
                        "key": "type",
                        "type": "select",
                        "label": "Type",
                        "desc": "Type of the object",
                        "options": [{
                            "key": "commit",
                            "value": "Commit"
                        }, {
                            "key": "tree",
                            "value": "Tree"
                        }, {
                            "key": "blob",
                            "value": "Blob"
                        }]
                    }]
                }
            }

## Triggers collection [/categories/{name}/triggers]

+ Parameters
    + name (required, string, `git`) ... `Name` of the Category
    
### List all Triggers of the Service [GET]
+ Response 200 (application/json)
    
        {
            "prehook": {
                "name": "git:prehook",
                "service": "Git",
                "title": "Pre-receive hook",
                "slug": "commit is scheduled for merge",
                "parameters": [{
                    "key": "author",
                    "type": "text",
                    "label": "Author",
                    "desc": "Name or email of the commit author"
                }, {
                    "key": "repo",
                    "type": "text",
                    "label": "Repository",
                    "desc": "Name of the repository"
                }, {
                    "key": "branch",
                    "type": "text",
                    "label": "Branch",
                    "desc": "Name of the branch commits would land into"
                }, {
                    "key": "title",
                    "type": "text",
                    "label": "Title",
                    "desc": "First line of commit message"
                }, {
                    "key": "desc",
                    "type": "textarea",
                    "label": "Description",
                    "desc": "Commit message starting with second line"
                }]
            },
            "posthook": {
                "name": "git:posthook",
                "service": "Git",
                "title": "Post-receive hook",
                "slug": "commit is merged",
                "parameters": [{
                    "key": "author",
                    "type": "text",
                    "label": "Author",
                    "desc": "Name or email of the commit author"
                }, {
                    "key": "repo",
                    "type": "text",
                    "label": "Repository",
                    "desc": "Name of the repository"
                }, {
                    "key": "branch",
                    "type": "text",
                    "label": "Branch",
                    "desc": "Name of the branch commits would land into"
                }, {
                    "key": "title",
                    "type": "text",
                    "label": "Title",
                    "desc": "First line of commit message"
                }, {
                    "key": "desc",
                    "type": "textarea",
                    "label": "Description",
                    "desc": "Commit message starting with second line"
                }]
            }
        }

## Trigger [/categories/{name}/triggers/{trigger}]

+ Parameters
    + name (required, string, `git`) ... Name of the Category
    + trigger (required, string, `posthook`) ... Name of the Trigger
    
### Retrieve a Service [GET]
+ Response 200 (application/json)
    
        {
            "name": "git:posthook",
            "service": "Git",
            "title": "Post-receive hook",
            "slug": "commit is merged",
            "parameters": [{
                "key": "author",
                "type": "text",
                "label": "Author",
                "desc": "Name or email of the commit author"
            }, {
                "key": "repo",
                "type": "text",
                "label": "Repository",
                "desc": "Name of the repository"
            }, {
                "key": "branch",
                "type": "text",
                "label": "Branch",
                "desc": "Name of the branch commits would land into"
            }, {
                "key": "title",
                "type": "text",
                "label": "Title",
                "desc": "First line of commit message"
            }, {
                "key": "desc",
                "type": "textarea",
                "label": "Description",
                "desc": "Commit message starting with second line"
            }]
        }

## Actions collection [/categories/{name}/actions]

+ Parameters
    + name (required, string, `git`) ... `Name` of the Category
    
### List all Triggers of the Service [GET]
+ Response 200 (application/json)
    
        {
            "createTag": {
                "name": "git:createTag",
                "service": "Git",
                "title": "Create new tag",
                "slug": "create new tag",
                "parameters": [{
                    "key": "tag",
                    "type": "text",
                    "label": "Tag name",
                    "desc": "Name of the tag"
                }, {
                    "key": "message",
                    "type": "textarea",
                    "label": "Message"
                }, {
                    "key": "object",
                    "type": "text",
                    "label": "SHA object",
                    "desc": "Identificator of the object to create tag to (ex. commit SHA)"
                }, {
                    "key": "type",
                    "type": "select",
                    "label": "Type",
                    "desc": "Type of the object",
                    "options": [{
                        "key": "commit",
                        "value": "Commit"
                    }, {
                        "key": "tree",
                        "value": "Tree"
                    }, {
                        "key": "blob",
                        "value": "Blob"
                    }]
                }]
            }
        }

## Action [/categories/{name}/actions/{action}]

+ Parameters
    + name (required, string, `git`) ... Name of the Category
    + action (required, string, `createTag`) ... Name of the Action
    
### Retrieve a Service [GET]
+ Response 200 (application/json)
    
        {
            "name": "git:createTag",
            "service": "Git",
            "title": "Create new tag",
            "slug": "create new tag",
            "parameters": [{
                "key": "tag",
                "type": "text",
                "label": "Tag name",
                "desc": "Name of the tag"
            }, {
                "key": "message",
                "type": "textarea",
                "label": "Message"
            }, {
                "key": "object",
                "type": "text",
                "label": "SHA object",
                "desc": "Identificator of the object to create tag to (ex. commit SHA)"
            }, {
                "key": "type",
                "type": "select",
                "label": "Type",
                "desc": "Type of the object",
                "options": [{
                    "key": "commit",
                    "value": "Commit"
                }, {
                    "key": "tree",
                    "value": "Tree"
                }, {
                    "key": "blob",
                    "value": "Blob"
                }]
            }]
        }


# Group Methods examples

**(informational)** There is actually a couple of ways you can deal with the methods that are not mapped directly to CRUD or HTTPv1.0 methods (GET, POST, PUT, DELETE). I'll try to display them all and we will figure out which to pick.


## First [/example/1/enable]
First of them is the one Github uses for staring\unstaring the repos. You are creating resource with PUT and DELETE methods and use them to toggle the boolean variable.

This is the method I'm currently using to enable\disable the rule.

### Enable the rule [PUT]
+ Response 204

### Disable the rule [DELETE]
+ Response 204

## Second [/example/2/enable]
Second one is to create its own endpoint for every state of that boolean variable and use it instead. You could also make them GET instead of PUT to be able to use them manually from browser and return the changed document.

### Enable the rule [GET]
+ Response 200

        {
            "id": 2,
            "enable": true,
            "trigger": "email:message",
            "action": {
                "type": "jira:createTicket",
                "options": {
                    "project": "stackstorm",
                    "type": "story",
                    "summary": "Email: {{ subject }}",
                    "description": "{{ from }} wrote: \n{{ body }}",
                    "reporter": "{{ from }}"
                }
            },
            "created": "2014-05-05T04:03:53.751Z",
            "edited": "2014-05-05T04:03:53.751Z",
            "triggered": "2014-05-05T04:04:38.570Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 1
        }

## Still second [/example/2/disable]

### Disable the rule [GET]
+ Response 200

        {
            "id": 2,
            "enable": false,
            "trigger": "email:message",
            "action": {
                "type": "jira:createTicket",
                "options": {
                    "project": "stackstorm",
                    "type": "story",
                    "summary": "Email: {{ subject }}",
                    "description": "{{ from }} wrote: \n{{ body }}",
                    "reporter": "{{ from }}"
                }
            },
            "created": "2014-05-05T04:03:53.751Z",
            "edited": "2014-05-05T04:03:53.751Z",
            "triggered": "2014-05-05T04:04:38.570Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 1
        }


## Third [/example/3]
Third one is a PATCH over the document itself. I don't know would it be as easier to do in python as it is in node, but it definitely the most complicated way, yet probably more native to HTTP itself.

### Toggle the flags of the rule [PATCH]
+ Request (application/json)

        {
            "enable": true
        }
    
+ Response 200 (application/json)

        {
            "id": 2,
            "enable": true,
            "trigger": "email:message",
            "action": {
                "type": "jira:createTicket",
                "options": {
                    "project": "stackstorm",
                    "type": "story",
                    "summary": "Email: {{ subject }}",
                    "description": "{{ from }} wrote: \n{{ body }}",
                    "reporter": "{{ from }}"
                }
            },
            "created": "2014-05-05T04:03:53.751Z",
            "edited": "2014-05-05T04:03:53.751Z",
            "triggered": "2014-05-05T04:04:38.570Z",
            "checked": "2014-05-05T05:05:54.747Z",
            "count": 1
        }
        
