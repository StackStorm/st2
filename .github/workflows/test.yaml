---
# This Test workflow uses pants
name: Test

on:
  push:
    branches:
      # only on merges to master branch
      - master
      # and version branches, which only include minor versions (eg: v3.4)
      - v[0-9]+.[0-9]+
    tags:
      # also version tags, which include bugfix releases (eg: v3.4.0)
      - v[0-9]+.[0-9]+.[0-9]+
  pull_request:
    type: [opened, reopened, edited]
    branches:
      # Only for PRs targeting those branches
      - master
      - v[0-9]+.[0-9]+
  #schedule:
  #  # run every night at midnight
  #  - cron:  '0 0 * * *'

jobs:
  pants-plugins-tests:
    name: 'Pants Plugins Tests (pants runs: pytest) - Python ${{ matrix.python.version-short }}'
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        # NOTE: We need to use full Python version as part of Python deps cache key otherwise
        # setup virtualenv step will fail.
        python:
          # Pants itself uses only 3.9
          - {version-short: '3.9', version: '3.9.14'}

    services:
      mongo:
        image: mongo:7.0
        ports:
          - 27017:27017

      rabbitmq:
        image: rabbitmq:3.8-management
        options: >-
          --name rabbitmq
        ports:
          - 5671:5671/tcp   # AMQP SSL port
          - 5672:5672/tcp   # AMQP standard port
          - 15672:15672/tcp # Management: HTTP, CLI

      redis:
         # Docker Hub image
         image: redis
         # Set health checks to wait until redis has started
         options: >-
           --name "redis"
           --health-cmd "redis-cli ping"
           --health-interval 10s
           --health-timeout 5s
           --health-retries 5
         ports:
           - 6379:6379/tcp

    env:
      COLUMNS: '120'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # a test uses a submodule, and pants needs access to it to calculate deps.
          submodules: 'recursive'
          # sadly, the submodule will only have fetch-depth=1, which is what we want
          # for st2.git, but not for the submodules. We still want actions/checkout
          # to do the initial checkout, however, so that it adds auth for fetching
          # in the submodule.

      - name: Fetch repository submodules
        run: |
          git submodule status
          git submodule foreach 'git fetch --all --tags'
          git submodule foreach 'git tag'

      - name: 'Set up Python (${{ matrix.python.version }})'
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python.version }}'

      - name: Cache and Install APT Dependencies
        uses: ./.github/actions/apt-packages

      - name: Initialize Pants and its GHA caches
        uses: ./.github/actions/init-pants
        with:
          # To ignore a bad cache, bump the cache* integer.
          gha-cache-key: cache0-py${{ matrix.python.version }}

      - name: Test pants-plugins
        env:
          # Github Actions uses the 'runner' user, so use that instead of stanley.
          ST2TESTS_SYSTEM_USER: 'runner'
          ST2TESTS_REDIS_HOST: '127.0.0.1'
          ST2TESTS_REDIS_PORT: '6379'
        run: |
          pants test pants-plugins/::

      - name: Upload pants log
        uses: actions/upload-artifact@v4
        with:
          name: pants-log-py${{ matrix.python.version }}-pants-plugins-tests
          path: .pants.d/pants.log
        if: always()  # We want the log even on failures.

  unit-tests:
    name: 'Unit Tests Shard ${{ matrix.shard.k }}/${{ matrix.shard.n }} (pants runs: pytest) - Python ${{ matrix.python.version-short }}'
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        # NOTE: We need to use full Python version as part of Python deps cache key otherwise
        # setup virtualenv step will fail.
        python:
          - {version-short: '3.8', version: '3.8.10'}
          - {version-short: '3.9', version: '3.9.14'}
        shard:
          # Sharding of tests is handled by pants:
          # https://www.pantsbuild.org/stable/docs/using-pants/advanced-target-selection#sharding-the-input-targets
          - {k: '0', n: '4'}
          - {k: '1', n: '4'}
          - {k: '2', n: '4'}
          - {k: '3', n: '4'}

    services:
      mongo:
        image: mongo:7.0
        ports:
          - 27017:27017

      rabbitmq:
        image: rabbitmq:3.8-management
        options: >-
          --name rabbitmq
        ports:
          - 5671:5671/tcp   # AMQP SSL port
          - 5672:5672/tcp   # AMQP standard port
          - 15672:15672/tcp # Management: HTTP, CLI

      redis:
         # Docker Hub image
         image: redis
         # Set health checks to wait until redis has started
         options: >-
           --name "redis"
           --health-cmd "redis-cli ping"
           --health-interval 10s
           --health-timeout 5s
           --health-retries 5
         ports:
           - 6379:6379/tcp

    env:
      COLUMNS: '120'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # a test uses a submodule, and pants needs access to it to calculate deps.
          submodules: 'recursive'
          # sadly, the submodule will only have fetch-depth=1, which is what we want
          # for st2.git, but not for the submodules. We still want actions/checkout
          # to do the initial checkout, however, so that it adds auth for fetching
          # in the submodule.

      - name: Fetch repository submodules
        run: |
          git submodule status
          git submodule foreach 'git fetch --all --tags'
          git submodule foreach 'git tag'

      - name: 'Set up Python (${{ matrix.python.version }})'
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python.version }}'

      - name: Cache and Install APT Dependencies
        uses: ./.github/actions/apt-packages

      - name: Initialize Pants and its GHA caches
        uses: ./.github/actions/init-pants
        with:
          # To ignore a bad cache, bump the cache* integer.
          gha-cache-key: cache0-py${{ matrix.python.version }}

      - name: Unit Tests
        env:
          # Github Actions uses the 'runner' user, so use that instead of stanley.
          ST2TESTS_SYSTEM_USER: 'runner'
          ST2TESTS_REDIS_HOST: '127.0.0.1'
          ST2TESTS_REDIS_PORT: '6379'
        run: >
          pants
          --python-bootstrap-search-path=[]
          --python-bootstrap-search-path=${{ steps.python.outputs.python-path }}
          --tag=unit
          --test-shard=${{ matrix.shard.k }}/${{ matrix.shard.n }}
          test '::'

      - name: Upload pants log
        uses: actions/upload-artifact@v4
        with:
          name: pants-log-py${{ matrix.python.version }}-unit-tests-shard-${{ matrix.shard.k }}_${{ matrix.shard.n }}
          path: .pants.d/pants.log
        if: always()  # We want the log even on failures.

  pack-tests:
    name: 'Pack Tests (pants runs: pytest) - Python ${{ matrix.python.version-short }}'
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        # NOTE: We need to use full Python version as part of Python deps cache key otherwise
        # setup virtualenv step will fail.
        python:
          - {version-short: '3.8', version: '3.8.10'}
          - {version-short: '3.9', version: '3.9.14'}

    services:
      mongo:
        image: mongo:7.0
        ports:
          - 27017:27017

      rabbitmq:
        image: rabbitmq:3.8-management
        options: >-
          --name rabbitmq
        ports:
          - 5671:5671/tcp   # AMQP SSL port
          - 5672:5672/tcp   # AMQP standard port
          - 15672:15672/tcp # Management: HTTP, CLI

      redis:
         # Docker Hub image
         image: redis
         # Set health checks to wait until redis has started
         options: >-
           --name "redis"
           --health-cmd "redis-cli ping"
           --health-interval 10s
           --health-timeout 5s
           --health-retries 5
         ports:
           - 6379:6379/tcp

    env:
      COLUMNS: '120'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # a test uses a submodule, and pants needs access to it to calculate deps.
          submodules: 'recursive'
          # sadly, the submodule will only have fetch-depth=1, which is what we want
          # for st2.git, but not for the submodules. We still want actions/checkout
          # to do the initial checkout, however, so that it adds auth for fetching
          # in the submodule.

      - name: Fetch repository submodules
        run: |
          git submodule status
          git submodule foreach 'git fetch --all --tags'
          git submodule foreach 'git tag'

      - name: 'Set up Python (${{ matrix.python.version }})'
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python.version }}'

      - name: Cache and Install APT Dependencies
        uses: ./.github/actions/apt-packages

      - name: Initialize Pants and its GHA caches
        uses: ./.github/actions/init-pants
        with:
          # To ignore a bad cache, bump the cache* integer.
          gha-cache-key: cache0-py${{ matrix.python.version }}

      - name: Pack Tests
        env:
          # Github Actions uses the 'runner' user, so use that instead of stanley.
          ST2TESTS_SYSTEM_USER: 'runner'
          ST2TESTS_REDIS_HOST: '127.0.0.1'
          ST2TESTS_REDIS_PORT: '6379'
        run: >
          pants
          --python-bootstrap-search-path=[]
          --python-bootstrap-search-path=${{ steps.python.outputs.python-path }}
          --tag=pack
          test '::'

      - name: Upload pants log
        uses: actions/upload-artifact@v4
        with:
          name: pants-log-py${{ matrix.python.version }}-pack-tests
          path: .pants.d/pants.log
        if: always()  # We want the log even on failures.

  #integration-tests: TODO: run integration tests

  set_merge_ok:
    name: Set Merge OK (Tests)
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
      - pants-plugins-tests
      - unit-tests
      - pack-tests
      #- integration-tests
    outputs:
      merge_ok: ${{ steps.set_merge_ok.outputs.merge_ok }}
    runs-on: ubuntu-latest
    steps:
      - id: set_merge_ok
        run: echo 'merge_ok=true' >> ${GITHUB_OUTPUT}

  merge_ok:
    name: Merge OK (Tests)
    if: always()
    needs:
      - set_merge_ok
    runs-on: ubuntu-latest
    steps:
      - run: |
          merge_ok="${{ needs.set_merge_ok.outputs.merge_ok }}"
          if [[ "${merge_ok}" == "true" ]]; then
            echo "Merge OK"
            exit 0
          else
            echo "Merge NOT OK"
            exit 1
          fi
