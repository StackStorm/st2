#!/bin/bash

set -e

LOGFILE="/tmp/st2_startup.log"
COMPONENTS="st2actionrunner st2api st2auth st2sensorcontainer st2rulesengine mistral st2web st2resultstracker st2notifier"
STANCONF="/etc/st2/st2.conf"
PYTHON=`which python`

# AR is assumed to be an environment variable.
if [ -z "$AR" ];
 then
   AR=10
fi

if [ -z "$WEBUI_PORT" ];
 then
   WEBUI_PORT=8080
fi

DEBTEST=`lsb_release -a 2> /dev/null | grep Distributor | awk '{print $3}'`

if [[ "$DEBTEST" == "Ubuntu" ]]; then
  TYPE="debs"
  PYTHONPACK="/usr/lib/python2.7/dist-packages"
elif [[ -f "/etc/redhat-release" ]]; then
  TYPE="rpms"
  PYTHONPACK="/usr/lib/python2.7/site-packages"
else
  echo "Unknown Operating System"
  exit 2
fi

function print_usage() {
    echo "usage: st2ctl {start, stop, restart, status}"
    echo
    echo "usage: st2ctl {restart-component}"
    echo "positional arguments:"
    echo "  component           Name of the st2 service to restart."
    echo "                      ${COMPONENTS}"
    echo
    echo "usage: st2ctl {reopen-log-files}"
    echo "positional arguments:"
    echo "  component           Name of the st2 service to reopen the log files for."
    echo "                      ${COMPONENTS}"
    echo
    echo "usage: st2ctl {reload, clean}"
    echo "optional arguments:"
    echo "  --register-all      Register all sensors, rules, and actions."
    echo "  --register-sensors  Register all sensors only."
    echo "  --register-rules    Register all rules only."
    echo "  --register-actions  Register all actions only."
    echo "  --verbose           Output additional debug and informational messages."
}

function service_map() {
  COM=$1
  case $COM in
  st2actionrunner)
    ALT_COM="actionrunner"
    ;;
  st2sensorcontainer)
    ALT_COM="sensor_container"
    ;;
  st2rulesengine)
    ALT_COM="rules_engine"
    ;;
  *)
    ALT_COM=$COM
    ;;
  esac

  echo $ALT_COM
}


if [ -z ${1} ] || [ ${1} != "start" -a ${1} != "stop" -a ${1} != "restart" -a ${1} != "status" -a ${1} != "restart-component" -a ${1} != "reopen-log-files" -a ${1} != "-component" -a ${1} != "reload" -a ${1} != "clean" ]
then
    print_usage
    exit 1
fi

if [ ${1} == "restart-component" ]
then
    if  [ -z ${2} ] || [ ${2} != "st2actionrunner" -a ${2} != "st2api" -a ${2} != "st2sensorcontainer" -a ${2} != "st2rulesengine" -a ${2} != "mistral" -a ${2} != "st2resultstracker" -a ${2} != "st2web" ]
    then
        print_usage
        exit 1
    fi
fi

# Note: Scripts already call reload with "--register-<content>"
# TODO: Update packs. actions to only pass in a resource name excluding # --register prefix
if [ ${1} == "reload" -o ${1} == "clean" ]; then
    if [ -z ${2} ]; then
        REGISTER_FLAGS="--register-sensors --register-actions"
    elif [ ! -z ${2} ] && [ ${2} == "--register-all" -o ${2} == "--register-sensors"  -o ${2} == "--register-rules" -o ${2} == "--register-actions" ]; then
        REGISTER_FLAGS=${2}
        if [ ! -z ${3} ] && [ ${3} == "--verbose" ]; then
            REGISTER_FLAGS="${REGISTER_FLAGS} ${3}"
        fi
    elif [ ${2} == "--verbose" ] && [ -z ${3} ]; then
        REGISTER_FLAGS="--register-sensors --register-actions ${2}"
    elif [ ${2} == "--verbose" ] && [ ${3} == "--register-all" -o ${3} == "--register-sensors"  -o ${3} == "--register-rules" -o ${3} == "--register-actions" ]; then
        REGISTER_FLAGS="${3} ${2}"
    else
        print_usage
        exit 1
    fi
fi

function st2start(){
  for i in `seq 1 ${AR}`
  do
    nohup st2actionrunner --config-file ${STANCONF} &>> ${LOGFILE} &
  done

  nohup st2auth --config-file ${STANCONF} &>> ${LOGFILE} &
  nohup st2api --config-file ${STANCONF} &>> ${LOGFILE} &
  nohup st2sensorcontainer --config-file ${STANCONF} &>> ${LOGFILE} &
  nohup st2resultstracker --config-file ${STANCONF} &>> ${LOGFILE} &
  nohup st2notifier --config-file ${STANCONF} &>> ${LOGFILE} &
  nohup st2rulesengine --config-file ${STANCONF} &>> ${LOGFILE} &
  if [[ "${CONTAINER}" == "DOCKER" ]]
  then
    /opt/openstack/mistral/.venv/bin/python /opt/openstack/mistral/mistral/cmd/launch.py --config-file /etc/mistral/mistral.conf --log-file /var/log/mistral.log &> /dev/null &
  else
    service mistral start
  fi
  (cd /opt/stackstorm/static/webui && nohup python -m SimpleHTTPServer $WEBUI_PORT) &>> ${LOGFILE} &
}

function st2stop(){
  for COM in $COMPONENTS
  do
    if [[ "${COM}" == "mistral" ]]
    then
      PID=`ps ax | grep -v grep | grep ${COM} | awk '{print $1}'`
      if [[ ! -z $PID ]]
      then
        for p in $PID
        do
           echo "Killing ${COM} PID: ${p}"
        done
        if [[ "${CONTAINER}" == "DOCKER" ]]
        then
          kill $p
        else
          service mistral stop
        fi
      else
        echo "${COM} is not running"
      fi
    elif [[ "${COM}" == "st2web" ]]
    then
      PID=`ps ax | grep -v grep | egrep "SimpleHTTPServer $WEBUI_PORT\$" | awk '{print $1}'`
      if [[ ! -z $PID ]]
      then
        for p in $PID
        do
           echo "Killing ${COM} PID: ${p}"
           kill $p
        done
      else
        echo "${COM} is not running"
      fi
    else
      ALT_COM=`service_map $COM`

      echo "Stopping $COM | $ALT_COM."

      PID=`ps ax | grep -v grep | egrep "${COM}|${ALT_COM}" | awk '{print $1}'`
      if [[ ! -z $PID ]]
      then
        for p in $PID
        do
          echo "Killing ${COM} PID: ${p}"
          kill $p
        done
      else
        echo "${COM} is not running"
      fi
    fi
  done
}

function restart_component() {
  COM=${1}
  ALT_COM=`service_map $COM`

  if [[ ! -z $COM ]]
  then
    if [[ "${COM}" == "st2actionrunner" ]]
    then
      PROC_COUNT=${AR}
    else
      PROC_COUNT=1
    fi
    echo "Restarting service ${COM}|${ALT_COM} with ${PROC_COUNT} process(es)."
    if [[ "${COM}" == "mistral" ]]
    then
      if [[ "${CONTAINER}" == "DOCKER" ]]
      then
        kill $p
        sleep 1
        /opt/openstack/mistral/.venv/bin/python /opt/openstack/mistral/mistral/cmd/launch.py --config-file /etc/mistral/mistral.conf --log-file /var/log/mistral.log &> /dev/null &
      else
        service mistral restart
      fi
    elif [[ "${COM}" == "st2web" ]]
    then
      PID=`ps ax | grep -v grep | egrep "SimpleHTTPServer $WEBUI_PORT\$" | awk '{print $1}'`
      if [[ ! -z $PID ]]
      then
        for p in $PID
        do
           kill $p
           sleep 1
           (cd /opt/stackstorm/static/webui && nohup python -m SimpleHTTPServer $WEBUI_PORT) &>> ${LOGFILE} &
        done
      else
        echo "${COM} is not running"
      fi
    else
      PID=`ps ax | grep -v grep | grep -v st2ctl | egrep "${COM}|${ALT_COM}" | awk '{print $1}'`
      if [[ ! -z $PID ]]
      then
        for p in $PID
        do
          echo "Killing ${COM} PID: ${p}"
          kill $p
        done
        for i in `seq 1 ${PROC_COUNT}`
        do
          ${COM} --config-file ${STANCONF} &>> ${LOGFILE} &
        done
      else
        echo "${COM} is not running"
      fi
    fi
  else
    echo "No component specified to restart."
  fi
}

function reopen_component_log_files() {
  COM=${1}
  ALT_COM=`service_map $COM`

  if [[ ! -z $COM ]]
  then
    if [[ "${COM}" == "st2actionrunner" ]]
    then
      PROC_COUNT=${AR}
    else
      PROC_COUNT=1
    fi

    echo "Sending SIGUSR1 to service ${COM}|${ALT_COM} with ${PROC_COUNT} process(es)."

    PID=`ps ax | grep -v grep | grep -v st2ctl | egrep "${COM}|${ALT_COM}" | awk '{print $1}'`
    if [[ ! -z $PID ]]
    then
      for p in $PID
      do
        echo "Sending SIGUSR1 to ${COM} PID: ${p}"
        kill -USR1 $p
      done
    else
      echo "${COM} is not running"
    fi
  else
    echo "No component specified to reopen the log files for."
  fi
}

function register_content() {
  echo "Registering content...[flags = ${REGISTER_FLAGS}]"
  $PYTHON ${PYTHONPACK}/st2common/bin/st2-register-content --config-file ${STANCONF} ${REGISTER_FLAGS}
}

clean_db() {
  echo "Dropping Database..."
  mongo st2 --eval "db.dropDatabase();"
}

clean_logs() {
  echo "Cleaning Logs..."
  rm -Rf /var/log/st2/*
}

function getpids(){
  echo "##### st2 components status #####"

  for COM in $COMPONENTS
  do
    if [[ "${COM}" == "st2web" ]]
    then
      PID=`ps ax | grep -v grep | egrep "SimpleHTTPServer $WEBUI_PORT\$" | awk '{print $1}'`
    else
      PID=`ps ax | grep -v grep | grep -v st2ctl | grep "${COM}" | awk '{print $1}'`
    fi
    if [[ ! -z $PID ]]
    then
      for p in $PID
      do
        echo "${COM} PID: ${p}"
      done
    else
      echo "${COM} is not running."
    fi
  done
}

function geturl(){
if [ ${WEBUI_PORT} == "80" ]; then
  echo "WebUI at http://`hostname`/"
else
  echo "WebUI at http://`hostname`:$WEBUI_PORT/"
fi
}

case ${1} in
  start)
    st2start
    getpids
    geturl
    ;;
  stop)
    st2stop
    ;;
  restart)
    st2stop
    sleep 1
    st2start
    getpids
    geturl
    ;;
  restart-component)
    restart_component ${2}
    sleep 1
    getpids
    ;;
  reopen-log-files)
    reopen_component_log_files ${2}
    sleep 1
    getpids
    ;;
  reload)
    register_content
    getpids
    ;;
  clean)
    echo "This will drop the database and delete all logs.  Are you sure [y/n]?"
    read verify
    if [[ "$verify" == "y" ]]; then
      st2stop
      clean_db
      clean_logs
      register_content
      st2start
      getpids
    else
      exit
    fi
    ;;
  status)
    getpids
    ;;
  *)
    echo "Valid actions: start|stop|restart|restart-component|reopen-log-files|reload|clean|status"
    ;;
esac
