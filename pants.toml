[anonymous-telemetry]
# This is opt-in by default, but we explicitly disable here as well.
enabled = false
# repo_id here allows individuals to opt-in on their machine
# To opt-in, use ~/.pants.rc or envrc to set [anonymous-telemetry].enabled=true
repo_id = "de0dea7a-9f6a-4c6e-aa20-6ba5ad969b8a"

[GLOBAL]
pants_version = "2.20.4"
pythonpath = ["%(buildroot)s/pants-plugins"]
build_file_prelude_globs = ["pants-plugins/macros.py"]
backend_packages = [
  # https://www.pantsbuild.org/stable/docs/using-pants/validating-dependencies
  "pants.backend.experimental.visibility",

  # python
  "pants.backend.python",
  "pants.backend.experimental.python", # activates twine `publish` support
  "pants.backend.experimental.python.framework.stevedore",
  "pants.backend.python.mixed_interpreter_constraints",
  "pants.backend.python.lint.bandit",
  "pants.backend.python.lint.black",
  "pants.backend.python.lint.flake8",
  "pants.backend.python.lint.pylint",

  # shell
  "pants.backend.shell",
  "pants.backend.shell.lint.shellcheck",

  # internal plugins in pants-plugins/
  "pants.backend.plugin_development",
  "api_spec",
  "pack_metadata",
  "release",
  "sample_conf",
  "schemas",
  "uses_services",
]
# pants ignores files in .gitignore, .*/ directories, /dist/ directory, and __pycache__.
pants_ignore.add = [
  # TODO: remove these once we start building wheels with pants.
  "dist_utils.py",
  "setup.py",
  # keep tailor from using legacy requirements files (not for pants)
  "contrib/examples/requirements.txt",
  "contrib/hello_st2/requirements.txt",
  "contrib/runners/*/in-requirements.txt",
  "contrib/runners/*/requirements.txt",
  "st2*/in-requirements.txt",
  "st2*/requirements.txt",
  "st2common/tests/fixtures/requirements-used-for-tests.txt",
  "/fixed-requirements.txt",
  "/test-requirements.txt",
  # ignore requirements.txt for now, preferring interim files that are decoupled from
  # legacy requirements files generation: requirements-pants.txt & lockfiles/st2-constraints.txt
  "/requirements.txt",
]

[source]
# recording each pack individually under root patterns is not great, but resolves these issues:
# - Using a /contrib/* or other glob in root_patterns is dodgy as runners & schemas are in the same dir.
#   In particular, with /contrib/* in root_patterns, *_runner imports become ambiguous
#   (eg `import noop_runner` should use runners/noop_runner/noop_runner not runners/noop_runner).
# - Using pack.yaml in marker_filenames prevents pants from inferring which fixture packs are
#   used by which tests. We import a PACK_NAME and PACK_PATH from fixture.py in each of these
#   fixture packs to enable this dependency inferrence. Having fine grained inferrence in-turn
#   reduces the number of tests that need to be re-run when we change a fixture.
# - Using another marker_file, like PACK_ROOT, is also problematic because of the core pack.
#   /contrib/core is symlinked to /st2tests/st2tests/fixtures/packs/core for use as a fixture.
#   It is used in quite a few tests, so it needs to continue living in both places.
#   But, overlapping source roots (for st2tests and the pack) make importing from the fixture
#   as we do with the other fixtures impossible.
# Thus, we really do need to register each pack in contrib (but never under st2tests) separately.
# We might also need to register packs in st2tests/testpacks.
root_patterns = [
  # root conftest.py
  "/",
  # core libs
  "/st2*",
  # runners
  "/contrib/runners/*_runner",
  # packs (list /contrib/* packs individually; see note above)
  "/contrib/chatops",
  "/contrib/core", # WARNING: also symlinked to st2tests/st2tests/fixtures/packs/core
  "/contrib/default",
  "/contrib/examples",
  "/contrib/hello_st2",
  "/contrib/linux",
  "/contrib/packs",
  "/st2tests/testpacks/checks",
  "/st2tests/testpacks/errorcheck",
  # pack common lib directories that ST2 adds to the PATH for actions/sensors
  "/contrib/*/lib",
  "/contrib/*/actions/lib",
  # other special-cased pack directories
  "/contrib/examples/actions/ubuntu_pkg_info", # python script runs via shell expecting cwd in PYTHONPATH
  # lint plugins
  "/pylint_plugins",
  # pants plugins
  "/pants-plugins",
  # misc
  "/scripts",
  "/tools",
  # benchmarks
  "/st2common/benchmarks/micro",
]

# DEFAULT has values that we can reuse/interpolate below
[DEFAULT]
# This is the range of python versions that we support.
st2_interpreter_constraints = "CPython>=3.8,<3.10"

# This should match the pants interpreter_constraints:
# https://github.com/pantsbuild/pants/blob/2.20.x/pants.toml#L147
# See: https://www.pantsbuild.org/stable/docs/getting-started/prerequisites
pants_plugins_interpreter_constraints = "CPython==3.9.*"

# For tools, we have to include python versions for BOTH st2 and pants-plugins
tool_interpreter_constraints = "CPython>=3.8,<3.10"

[python]
# resolver_version is always "pip-2020-resolver". legacy is not supported.
enable_resolves = true
default_resolve = "st2"
# these are the primary constraints for st2 code
interpreter_constraints = [
  # python_distributions needs a single constraint (vs one line per python version).
  "CPython>=3.8,<3.11",
  # NB: constraints for tools defined below
]

[python.resolves]
# st2 is the primary resolve
st2 = 			"lockfiles/st2.lock"
# tool and misc other resolves (for most, see //BUILD.tools)
bandit = 		"lockfiles/bandit.lock"
black = 		"lockfiles/black.lock"
flake8 = 		"lockfiles/flake8.lock"
pants-plugins = "lockfiles/pants-plugins.lock" # see //pants-plugins/BUILD
pylint = 		"lockfiles/pylint.lock" # see //pylint_plugins/BUILD
pytest = 		"lockfiles/pytest.lock"
setuptools = 	"lockfiles/setuptools.lock"
twine = 		"lockfiles/twine.lock"

[python.resolves_to_interpreter_constraints]
# for tools, we have to include constraints for st2 and pants-plugins
bandit = 		["CPython>=3.8,<3.11"]
black = 		["CPython>=3.8,<3.11"]
flake8 = 		["CPython>=3.8,<3.11"]

pants-plugins = [
  # this should match the pants interpreter_constraints:
  # https://github.com/pantsbuild/pants/blob/2.18.x/pants.toml#L144
  # See: https://www.pantsbuild.org/docs/prerequisites
  "CPython==3.9.*",
]
pylint = 	 	["CPython>=3.8,<3.11"]
pytest = 	 	["CPython>=3.8,<3.11"]
setuptools = 	["CPython>=3.8,<3.11"]
twine = 	 	["CPython>=3.8,<3.11"]

[python.resolves_to_constraints_file]
# Our direct requirements are in requirements-pants.txt;
# put indirect/transitive version constraints here:
st2 = "lockfiles/st2-constraints.txt"

[export]
# When exporting the virtualenv, include editable installs of our sources
# so that the entry_points metadata is available for stevedore's use.
py_editable_in_resolve = ["st2"]
# We need mutable venvs to use the editable installs of our sources.
py_resolve_format = "mutable_virtualenv"

[python-infer]
# https://www.pantsbuild.org/stable/reference/subsystems/python-infer#string_imports
# https://www.pantsbuild.org/stable/reference/subsystems/python-infer#string_imports_min_dots
# Infer a target's dependencies based on strings that look like dynamic deps with >=1 dots.
# To debug the imports and see if a string is used in dep inference or if it is ignored, use:
#   pants python-dump-source-analysis --analysis-flavor=raw_dependency_inference <path(s) to file(s)> | jq '.[].resolved'
string_imports = true
string_imports_min_dots = 1
# https://www.pantsbuild.org/stable/reference/subsystems/python-infer#unowned_dependency_behavior
# The default changed from "ignore" to "warning" in pants 2.14.
# The ambiguity_resolution setting/feature (below) added in 2.16 resolves most of
# our ambiguous dependency inference issues, which allowed us to remove the explicit
# deps in various BUILD files. But, there is not a good way to tell pants about our
# custom PYTHONPATH for packs, so actions that import other actions are still showing
# up as unowned. Maybe we can extend pants-plugins/pack_metadata so we can use "warn".
unowned_dependency_behavior = "ignore"
# https://www.pantsbuild.org/stable/reference/subsystems/python-infer#ambiguity_resolution
# When resolving ambiguous deps prefer one that is in the same source root as the
# file that uses it. So, without manually disambiguating the dep in the BUILD file,
# importing tests.unit.base in st2common/tests/unit will get a dep on st2common/tests/unit/base.py
ambiguity_resolution = "by_source_root"

[setup-py-generation]
# when building the package (with `pants package ::`), pants will,
# by default, generate a setup.py file for use with setuptools.
generate_setup_default = true # true by default

[bandit]
args = [
  "-lll",  # only HIGH severity level
  "--exclude",
  "build,dist",
  "--quiet", # only show output in the case of an error
]
install_from_resolve = "bandit"

[black]
install_from_resolve = "black"

[flake8]
install_from_resolve = "flake8"
config = "lint-configs/python/.flake8"

[generate-lockfiles]
diff = true

[pylint]
install_from_resolve = "pylint"
config = "lint-configs/python/.pylintrc"
source_plugins = [
  # the /pylint_plugins directory
  "pylint_plugins",
]
args = [
  # match the current Makefile usage with -E (TODO: drop this)
  "--errors-only",
  # needed in st2* components, runners, packs
  "--load-plugins=api_models",
  # needed in st2* components, runners
  "--load-plugins=db_models",
]

[pytest]
install_from_resolve = "pytest"
args = [
  "--no-header",  # don't print pytest version for every tested file
]
execution_slot_var = "ST2TESTS_PARALLEL_SLOT"

[regex-lint]
config = "@lint-configs/regex-lint.yaml"

[setuptools]
install_from_resolve = "st2"

[twine]
install_from_resolve = "twine"

[cli.alias]
--all-changed = "--changed-since=HEAD --changed-dependents=transitive"
