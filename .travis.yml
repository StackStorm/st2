os: linux
dist: xenial
language: python

branches:
  only:
    - master
    - /^v[0-9]+\.[0-9]+$/

python:
  - "3.6"
  # - "3.7"
  # - "3.8"
  # - "3.9"

env:
  global:
    - IS_NIGHTLY_BUILD=$([ "${TRAVIS_EVENT_TYPE}" = "cron" ] && echo "yes" || echo "no")
    # NOTE: We only enable coverage for master builds and not pull requests
    # since it has huge performance overhead (tests are 50% or so slower)
    - ENABLE_COVERAGE=$([ "${TRAVIS_PULL_REQUEST}" = "false" ] && [ "${IS_NIGHTLY_BUILD}" = "no" ] && echo "yes" || echo "no")
    # We need to explicitly specify terminal width otherwise some CLI tests fail on container
    # environments where small terminal size is used.
    - COLUMNS=120
    - PYLINT_CONCURRENCY=2
    # We only run tests with "--with-timer" flag on master and not for PRs since it adds 1-2
    # # minutes of overhead to each build.
    - NOSE_TIME=$([ "${TRAVIS_PULL_REQUEST}" = "false" ] && [ "${IS_NIGHTLY_BUILD}" = "no" ] && echo "yes" || echo "no")
    # Travis-specific st2.conf (with travis user instead of stanley)
    - ST2_CONF=conf/st2.travis.conf
    # Tell StackStorm that we are indeed in CI mode
    - ST2_CI='true'
    - ST2_CI_USER='travis'
    - ST2_CI_REPO_PATH="${TRAVIS_BUILD_DIR}"
  jobs:
    # NOTE: We combine builds because Travis offers a maximum of 5 concurrent
    # builds and having 6 tasks / builds means 1 tasks will need to wait for one
    # of the other 5 tasks to finish before it can start
    # NOTE: Thresholds only apply to the make target and not to the whole build
    # job which also includes "make requirements" and other steps
    # "make requirements" can take substantially lower if the cache is purged
    # and this would cause too many intermediate failures / false positives
    # NOTE: TASK is inspected in commands below and other travis scripts.
    # For example, ci-py3* targets trigger an alternate virtualenv build method.
    # If you rename or reorder make targets in TASK, you may need to adjust:
    # scripts/travis/install-requirements.sh
    # scripts/travis/run-nightly-make-task-if-exists.sh
    #
    # The follow builds are now done in GitHub Actions
    # - TASK=ci-checks COMMAND_THRESHOLD=300
    # - TASK=compilepy3 COMMAND_THRESHOLD=300
    # - TASK=ci-packs-tests COMMAND_THRESHOLD=300
    # - TASK=ci-unit COMMAND_THRESHOLD=300

    - TASK=ci-integration COMMAND_THRESHOLD=600

# jobs:
#   fast_finish: true
#   allow_failures:
#     - python: "3.7"
#     - python: "3.8"
#     - python: "3.9"

addons:
  apt:
    sources:
      - sourceline: 'deb [arch=amd64] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse'
        key_url: 'https://www.mongodb.org/static/pgp/server-4.0.asc'
    packages:
      - mongodb-org-server=4.0.*
      - mongodb-org-shell=4.0.*
      - rabbitmq-server
      - libffi-dev

cache:
  pip: true
  directories:
    # NOTE: If using a custom "install" step aka overriding "install" step, "cache.pip: true" doesn't work
    # and directory needs to be explicitly added to the cache.
    # See https://github.com/travis-ci/travis-ci/issues/3239, https://github.com/oppia/oppia/pull/5281 for details.
    - $HOME/.cache/pip
    - virtualenv/
    # NOTE: Caching .tox speeds up py3 build for 30-60 seconds, but causes issues when dependencies
    # are updated so it's disabled
    #- .tox/

install:
  - ./scripts/travis/install-requirements.sh
  # prep a travis-specific dev conf file that uses travis instead of stanley
  - cp conf/st2.dev.conf "${ST2_CONF}" ; sed -i -e "s/stanley/${ST2_CI_USER}/" "${ST2_CONF}"
  - sudo scripts/travis/add-itest-user-key.sh
  - sudo .circle/add-itest-user.sh
  - if [[ "${TASK}" = *'-packs-tests'* ]] || [[ "${TASK}" = *'-integration'* ]]; then sudo scripts/travis/permissions-workaround.sh; fi

# Let's enable rabbitmqadmin
# See https://github.com/messagebus/lapine/wiki/Testing-on-Travis.
before_script:
  # Use a custom mongod.conf which uses various speed optimizations
  - sudo cp scripts/travis/mongod.conf /etc/mongod.conf
  # Clean up any old MongoDB 4.0 data files laying around and make sure mongodb user can write to it
  - sudo rm -rf /var/lib/mongodb ; sudo mkdir /var/lib/mongodb ; sudo chown -R mongodb:mongodb /var/lib/mongodb
  - sudo service mongod restart ; sleep 5
  - sudo service mongod status
  - sudo tail -n 30 /var/log/mongodb/mongod.log
  # Use custom RabbitMQ config which enables SSL / TLS listener on port 5671 with test certs
  - sudo cp scripts/travis/rabbitmq.config /etc/rabbitmq/rabbitmq.config
  - cat /etc/rabbitmq/rabbitmq.config
  - ls -l /etc/rabbitmq
  - ls -l /home/travis
  - ls -l /home/travis/build
  - ls -l /home/travis/build/StackStorm
  - ls -l /home/travis/build/StackStorm/st2
  - ls -l /home/travis/build/StackStorm/st2/st2tests
  - ls -l /home/travis/build/StackStorm/st2/st2tests/st2tests
  - ls -l /home/travis/build/StackStorm/st2/st2tests/st2tests/fixtures
  - ls -l /home/travis/build/StackStorm/st2/st2tests/st2tests/fixtures/ssl_certs
  - ls -l /home/travis/build/StackStorm/st2/st2tests/st2tests/fixtures/ssl_certs/ca
  - ls -l /home/travis/build/StackStorm/st2/st2tests/st2tests/fixtures/ssl_certs/server
  - cat /home/travis/build/StackStorm/st2/st2tests/st2tests/fixtures/ssl_certs/ca/ca_certificate_bundle.pem
  - cat /home/travis/build/StackStorm/st2/st2tests/st2tests/fixtures/ssl_certs/server/server_certificate.pem
  # Install rabbitmq_management RabbitMQ plugin
  - sudo service rabbitmq-server restart ; sleep 5
  - sudo rabbitmq-plugins enable rabbitmq_management
  - sudo wget http://guest:guest@localhost:15672/cli/rabbitmqadmin -O /usr/local/bin/rabbitmqadmin
  - sudo chmod +x /usr/local/bin/rabbitmqadmin
  - sudo service rabbitmq-server restart
  # chmod to make glob work (*.log to avoid log dir)
  - sudo chmod a+rx /var/log/rabbitmq ; sudo tail -n 30 /var/log/rabbitmq/*.log
  # Print various binary versions
  - mongod --version
  - git --version
  - pip --version
  - virtualenv --version
  # Print out various environment variables info
  - make play

script:
  # Clean up egg-info directories which get created when installing runners
  # NOTE: We enable code coverage and per test timing information on master so build can take twice
  # as long as PR builds
  - if [[ "${TRAVIS_PULL_REQUEST}" = "false" ]] && [[ "${IS_NIGHTLY_BUILD}" = "no" ]]; then COMMAND_THRESHOLD=$(expr ${COMMAND_THRESHOLD} \* 2); fi; ./scripts/travis/time-command.sh "make ${TASK}" ${COMMAND_THRESHOLD}
  # Run any additional nightly checks only as part of a nightly (cron) build
  - if [[ "${IS_NIGHTLY_BUILD}" = "yes" ]]; then ./scripts/travis/run-nightly-make-task-if-exists.sh "${TASK}"; fi
  # NOTE: We only generate and submit coverage report for master and version branches
  # NOTE: We put this here and not after_success so build is marked as failed if this step fails
  # See https://docs.travis-ci.com/user/customizing-the-build/#breaking-the-build
  # https://github.com/travis-ci/travis-ci/issues/758#issuecomment-266756853
  - if [[ ${TASK} = 'ci-unit' ]] || [[ ${TASK} = 'ci-integration' ]] && [[ "${ENABLE_COVERAGE}" = 'yes' ]]; then ./scripts/travis/submit-codecov-coverage.sh; fi

# Don't store cache for target PR branch (typically `master`), because it will be re-used for opened PRs
# See: https://docs.travis-ci.com/user/caching/#Pull-request-builds-and-caches
# Alternative: use strict pip pinning, including git-based pip packages
before_cache:
  - if [[ "${TRAVIS_PULL_REQUEST}" = 'false' ]] && [[ "${IS_NIGHTLY_BUILD}" = "no" ]]; then rm -rf virtualenv/; fi

# We want to be notified when a master or nightly build fails
notifications:
  # Post build failures to '#development' channel in 'stackstorm-community' Slack
  slack:
    rooms:
      - secure: "FNkr3XL19+a3qYwnQg6GRiS7ixZkHAYzqdmp+Kse2JROOalPy5vVK0wrmBRDJWA1gDDt2mMAnqAwFwID9n7rQv/oD1Ai10q7lCFVMbdAM4+yjYuXJ4i8zW0P6MIvxCb39tvEjq7g55ynE2cInpJRZ11RfbG259jBCbSzBaBtMos="
    on_pull_requests: false
    on_success: change # default: always
    on_failure: always # default: always
